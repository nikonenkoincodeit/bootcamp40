//Node.js
//Node.js — це JavaScript–оточення побудоване на JavaScript–рушієві Chrome V8.

//Встановлення
//https://nodejs.org/uk/
//https://habr.com/ru/company/timeweb/blog/541452/

//npm
// npm init - ініціалізує npm в проекті і створює файл package.json
// npm install - встановлює всі залежності, перелічені в package.json
// npm install [package-name] - встановить пакет локально у папку node_modules
// npm uninstall [package-name] - видалить пакет, встановлений локально і оновить package.json
// npm start і npm test - запустить скрипт start або test, розташований в package.json
// npm run [custom-script] - запустить кастомний скрипт, розташований в package.json
// npm outdated - використовується для пошуку оновлень, виявить сумісні версії програмно і виведе список доступних оновлень
// npm update - оновить всі пакети до максимально дозволеної версії

//npm-скрипти

// Команди npm install і npm uninstall мають три прапорці.

// --save - вказує, що додається залежність, яка увійде до фінального продукту. Пакет буде встановлений локально, в папку node_modules і буде доданий запис в поле dependencies в package.json.
// --save-dev/-D - вказує, що додається залежність розробки. Пакет буде встановлений локально в папку node_modules, і буде доданий запис в поле devDependencies в package.json.
// --global - вказує, що додається глобальна залежність, тобто інструмент, який доступний для будь-якого проекту. Пакет буде встановлений глобально (в систему).

//Управління кешем
//npm cache clean

//Модульність коду

//Підтримка - добре розроблений модуль, покликаний максимально зменшити залежність від
//інших частин коду.

//Простір імен - змінні, що не входять в область видимості функції, є глобальними.
//Внаслідок цього, як правило, відбувається забруднення простору імен, де повністю
//непов'язаний код розділяє глобальні змінні. Модулі дозволяють уникнути забруднення
//простору імен, створюючи окрему область видимості для змінних.

//Повторне використання - модуль можна повторно використовувати знову і знову,
//без необхідності знати що-небудь про оточення, в якому він використовується.

//Імпорт *

//name import

// import { months, sayHi as say } from "./main.js";
// import { months,  say } from "./main.js";
// import * as obj from "./main.js";
// obj.say("Poly");
// console.log("months :>> ", obj.months);
//default import

import s from "./main.js";
s("Poly");
