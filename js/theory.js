//Throttle і Debounce - це два схожих, але різних за поведінкою прийоми, що дозволяють
//контролювати кількість разів, яку ми дозволяємо виконувати функції з часом.

//throttle
//Прийом throttle контролює кількість разів, яку функція може бути викликана протягом
//певного проміжку часу. Тобто дозволяє викликати функцію не частіше одного разу
//за N мілісекунд, гарантуючи її регулярне виконання.

//_.throttle( func, wait )

//Реалізація з бібліотеки Lodash очікує першим аргументом функцію, яку необхідно
//«загальмувати», а другим - кількість мілісекунд. Повертає нову функцію для передачі
//в слухач події.

// let scrollEventCounter = 0;

// document.addEventListener('scroll', onScroll);
// document.addEventListener('scroll', _.throttle(onScroll, 500));

// function onScroll() {
//   scrollEventCounter += 1;
//   console.log(scrollEventCounter);
// }

//debounce
//Прийом debounce гарантує, що функція буде викликана лише у тому разі, якщо між подіями
//буде пауза N мілісекунд. Наприклад, доки користувач скролить сторінку функція не буде
//викликана, але щойно він перестав скролити, функція буде викликана через 300 мілісекунд.
//Якщо скрол відновиться раніше, ніж через 300 мілісекунд після паузи, функція не буде
//викликана.

//_.debounce( func, wait, options )
// let scrollEventCounter = 0;
// document.addEventListener(
//   'scroll',
//   _.debounce(onScroll, 500, {
//     leading: true,
//     trailing: true,
//   }),
// );

// function onScroll() {
//   scrollEventCounter += 1;
//   console.log(scrollEventCounter);
// }

//За замовчуванням метод debounce працює у режимі, коли функція викликається
//через N мілісекунд після паузи між потоками подій trailing edge (в кінці).

//Методу debounce бібліотеки Lodash можна передати необов'язковий третій аргумент - об'єкт
//параметрів, який містить дві властивості leading (за замовчуванням false) і trailing
//(за замовчуванням true). Ці налаштування змінюють режим і вказують, чи повинна функція
//запускатися на початку потоку подій або в кінці після паузи.

//leading - false, trailing - true: за замовчуванням функція буде викликатись тільки після
//того, як затримка закінчиться
//leading - true, trailing - true: викликається, коли починається затримка,
//і буде викликатись після її закінчення.
//leading - true, trailing - false: викликається лише на початку затримки.

//Атрибут loading

//<img src="my-image.jpg" loading="lazy" alt="Image description" />

//lazy - браузер виконає відкладене завантаження зображення.
//eager - зображення буде завантажене за першої нагоди, тобто без відкладеного завантаження.
//auto - браузер сам визначає - виконувати відкладене завантаження чи ні.
//Значення за замовчуванням.

//Бібліотека lazysizes

//Усім зображенням, які необхідно завантажувати відкладено, задаємо клас lazyload і
//замінюємо атрибут src на data-src. Це необхідно бібліотеці lazysizes для правильної
//роботи.

//<img class="lazyload" data-src="path/to/my-image.jpg" alt="Generic alt" />

//Доки зображення завантажується можна показувати заповнювач низької якості.
//Ця техніка називається LQIP (Low Quality Image Placeholder).

{
  /* <img
  class="lazyload"
  src="path/to/lqip-placeholder.jpg"
  data-src="path/to/my-image.jpg"
  alt="Generic alt"
/> */
}
